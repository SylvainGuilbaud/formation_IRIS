networks:
  irisnetwork:
    ipam:
      driver: default
      config:
        - subnet: 172.0.0.0/24
services:
  iris:
    build:
      context: .
      target: final
    restart: always
    container_name: ${iris_container_name}
    hostname: ${iris_container_name}
    ports:
      - 12772:1972
      - 52773:52773
      - 13773:53773
    command: --check-caps false
    # command: --key /key/iris.key
    # environment:
    #   - ISC_DATA_DIRECTORY=/irisdata
    volumes:
      - ./data:/data
      - ./jdbc:/jdbc
      - ./:/home/irisowner/dev
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"
      # - ./src:/app/src
      # - ./:/home/irisowner/dev
      # - ./volumes/irisdata:/irisdata
      # - ./key/iris.key:/key/iris.key
    networks:
      irisnetwork:
        ipv4_address: 172.0.0.10
  notebook:
    # build:
    #   context: ./notebook
    image: jupyter-notebook:1
    volumes:
      - ./notebook/Notebooks:/Notebooks
    command: "start-notebook.sh --NotebookApp.token='' --NotebookApp.password='' --notebook-dir=/Notebooks"
    ports:
      - "58888:8888"
    environment:
      - IRISINSTALLDIR='/usr/irissys'
    
  # jupyter:
  #   # image: jupyter/datascience-notebook
  #   # image: jupyter/base-notebook
  #   build: 
  #     context: ./jupyter
  #     dockerfile: Dockerfile
  #   restart: always
  #   pull_policy: always
  #   hostname: jupyter
  #   container_name: ${iris_container_name}-jupyter
  #   entrypoint: jupyter lab --ip 0.0.0.0 --port 8888 --allow-root --no-browser --notebook-dir=/data/Notebooks --NotebookApp.token='' --NotebookApp.password='' --NotebookApp.disable_check_xsrf=True 
  #   user: root
  #   environment:
  #       NB_USER: docker_worker
  #       NB_UID: 1008
  #       NB_GID: 1011
  #       CHOWN_HOME: 'yes'
  #       CHOWN_HOME_OPTS: -R
  #   ports:
  #   - "14200:8888" # where Jupyter will be listening
  #   - "14201:6006"
  #   volumes:
  #     - ./jupyter:/data
  mysql: 
    # image: mysql:8.0.30
    image: mysql
    command: --default-authentication-plugin=mysql_native_password
    hostname: mysql
    init: true
    container_name: ${iris_container_name}-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=mysqlpass
    ports:
      - 3306:3306
    volumes:
      - ./mysql:/docker-entrypoint-initdb.d
    networks:
      irisnetwork:
        ipv4_address: 172.0.0.11
  postgres:
    container_name: ${iris_container_name}-postgres
    image: postgres
    environment:
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./src/sql/postgreSQL:/docker-entrypoint-initdb.d/
      - ./volumes/postgreSQL:/var/lib/postgresql/data
    ports:
      - 5432:5432
    restart: unless-stopped
    healthcheck:
        test: ["CMD", "pg_isready", "-U", "postgres"]
        interval: 30s
        timeout: 30s
        retries: 3
    networks:
      irisnetwork:
        ipv4_address: 172.0.0.12
  ftp_server:
    image: delfer/alpine-ftp-server:latest
    container_name: ${iris_container_name}-ftp-server
    ports:
      - "21:21"
      - "21000-21010:21000-21010"
    volumes: 
      - "./data:/home/app/"
      # - "./data/passwd:/etc/pure-ftpd/passwd"
# uncomment for ssl/tls, see https://github.com/stilliard/docker-pure-ftpd#tls
#      - "/folder_on_disk/ssl:/etc/ssl/private/"
# or ssl/tls with Let's Encrypt (cert and key as two files)
#      - "/etc/letsencrypt/live/<your_server>/cert.pem:/etc/ssl/private/pure-ftpd-cert.pem"
#      - "/etc/letsencrypt/live/<your_server>/privkey.pem:/etc/ssl/private/pure-ftpd-key.pem"
    environment:
      PUBLICHOST: "localhost"
      USERS: "app|youneverknow|/home/app|10000"
      ADDRESS: "172.0.0.100"
# also for ssl/tls:
#      ADDED_FLAGS: "--tls=2"
    restart: always
    networks:
      irisnetwork:
        ipv4_address: 172.0.0.100


